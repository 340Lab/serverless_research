## filter with fixed value
filter: 
  dag_type: single
  cold_start: high
  fn_type: cpu
  scale_down_exec: default.
  # request_freq: low
  
## each group bars
targets_alias:
- [{scale_num: temp_scaler., scale_up_exec: least_task.,sche: pos., instance_cache_policy: no_evict.}, 'Temp_POS_NoEvi']
- [{scale_num: temp_scaler., scale_up_exec: least_task.,sche: pos., instance_cache_policy: lru.10}, 'Temp_POS_LRU10']
- [{scale_num: hpa., scale_up_exec: least_task.,sche: pos.,instance_cache_policy: no_evict.}, 'HPA_POS_NoEvi']
- [{scale_num: hpa., scale_up_exec: least_task.,sche: pos., instance_cache_policy: lru.10}, 'HPA_POS_LRU10']
- [{scale_num: hpa., scale_up_exec: least_task.,sche: random.,instance_cache_policy: no_evict.}, 'HPA_Random_NoEvi']
- [{scale_num: hpa., scale_up_exec: least_task.,sche: random.,instance_cache_policy: lru.10.}, 'HPA_Random_LRU10']
- [{scale_num: hpa., scale_up_exec: least_task.,sche: greedy., instance_cache_policy: no_evict.}, 'HPA_Greedy_NoEvi']
- [{scale_num: hpa., scale_up_exec: least_task.,sche: greedy., instance_cache_policy: lru.10}, 'HPA_Greedy_LRU10']

# - [{mechtype: scale_sche_joint,scale_num: hpa., scale_up_exec: least_task.,sche: pos.}, 'Joint_HPA_POS)']
# - [{mechtype: scale_sche_joint,scale_num: temp., scale_up_exec: least_task.,sche: pos.}, 'Joint_Temp_POS']

# - [{mechtype: no_scaler,scale_num: 'no', scale_up_exec: 'no',sche: greedy}, 'NoScalerGreedy']

## group on x axis:
group: 
  by: request_freq
  types: [low,middle,high]
  alias: 'Request Frequency'
  type_alias: ['Low','Middle','High']

## y axis
values:
# - {alias: Throughput, trans: throughput}
- {alias: Cost, trans: cost_per_req}
- {alias: Latency(ms), trans: '[waitsche_time_per_req,coldstart_time_per_req,datarecv_time_per_req,exe_time_per_req]'} # convert 10ms to ms
- {alias: Quality-Price Ratio, trans: 1/cost_per_req/time_per_req}